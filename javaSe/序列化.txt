序列化:
	Person:
		public class Person implements java.io.Serializable
		{
			private String name;
			private int age;
			
			public Person(String name , int age)
			{
				this.name = name;
				this.age =age;
			}
			...
		}

		public class WriteObject
		{
			public static void main(String[] args)
			{
				try(
					ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("object.txt"))
				)
				{
					Person per = new Person("孙悟空" , 500);
					oos.writeObject(per);
				}
				catch(IOException ex)
				{
				
					ex.printStackTrace();
				}
			}
		}


反序列化:	(必须提供该java对象的class文件,反序列化无需通过构造器来初始化java对象)
		(当一个可序列话类有多个父类时（包括直接和简接父类）,这些父类要么是可序列化的,要么有无参数的构造器,否则将引发InvalidClassException
		 如果父类时不可序列化的,只带有无参数的构造器,则该父类中定义的field值不会序列化到二进制流中)

		public class readObject
		{
			public static void main(String[] args)
			{
				try(
					ObjectInputStream ois = new ObjectInputStream(new FileInputStream("object.txt"))
				)
				{
					Person p = (Person)ois.readObject();
					System.out.println("名字为:"+per.getName()+"\n年龄为:"+p.getAge());
				}
				catch(Exception ex)
				{
					ex.printStackTrace();
				}
			}
		}


********************************************************************************************/


自定义序列化:
		transient:	(只能用于修饰Field)
			
				Person:
					public class Person
						implements java.io.Serializable
					{
						private String name;
						private transient int age;
						...
					}

		重写:
				Person:
					import java.io.*;

					public class Person
						implements java.io.Serializable
					{
						private String name;
						private int age;
						// 注意此处没有提供无参数的构造器!
						public Person(String name , int age)
						{
							System.out.println("有参数的构造器");
							this.name = name;
							this.age = age;
						}
						// 省略name与age的setter和getter方法

						// name的setter和getter方法
						public void setName(String name)
						{
							this.name = name;
						}
						public String getName()
						{
							return this.name;
						}

						// age的setter和getter方法
						public void setAge(int age)
						{
							this.age = age;
						}
						public int getAge()
						{
							return this.age;
						}

						private void writeObject(java.io.ObjectOutputStream out)
							throws IOException
						{
							// 将name Field的值反转后写入二进制流
							out.writeObject(new StringBuffer(name).reverse());
							out.writeInt(age);
						}
						private void readObject(java.io.ObjectInputStream in)
							throws IOException, ClassNotFoundException
						{
							// 将读取的字符串反转后赋给name Field
							this.name = ((StringBuffer)in.readObject()).reverse()
								.toString();
							this.age = in.readInt();
						}
					}
		writeReplace:		(表面上序列化Person,实际上序列化的是ArrayList)
				Person:

					import java.util.*;
					import java.io.*;

					public class Person
						implements java.io.Serializable
					{
						private String name;
						private int age;
						// 注意此处没有提供无参数的构造器!
						public Person(String name , int age)
						{
							System.out.println("有参数的构造器");
							this.name = name;
							this.age = age;
						}
						// 省略name与age的setter和getter方法

						// name的setter和getter方法
						public void setName(String name)
						{
							this.name = name;
						}
						public String getName()
						{
							return this.name;
						}

						// age的setter和getter方法
						public void setAge(int age)
						{
							this.age = age;
						}
						public int getAge()
						{
							return this.age;
						}

						//	重写writeReplace方法，程序在序列化该对象之前，先调用该方法
						private Object writeReplace()throws ObjectStreamException
						{
							ArrayList<Object> list = new ArrayList<>();
							list.add(name);
							list.add(age);
							return list;
						}
					}

					import java.io.*;
					import java.util.*;

					public class ReplaceTest
					{
						public static void main(String[] args) 
						{
							try(
								// 创建一个ObjectOutputStream输出流
								ObjectOutputStream oos = new ObjectOutputStream(
									new FileOutputStream("replace.txt"));
								// 创建一个ObjectInputStream输入流
								ObjectInputStream ois = new ObjectInputStream(
									new FileInputStream("replace.txt")))
							{
								Person per = new Person("孙悟空", 500);
								// 系统将per对象转换字节序列并输出
								oos.writeObject(per);
								// 反序列化读取得到的是ArrayList
								ArrayList list = (ArrayList)ois.readObject();
								System.out.println(list);
							}
							catch (Exception ex)
							{
								ex.printStackTrace();
							}
						}
					}

		
		readResovle:
				import java.io.*;

				public class Orientation
					implements java.io.Serializable
				{
					public static final Orientation HORIZONTAL = new Orientation(1);
					public static final Orientation VERTICAL = new Orientation(2);
					private int value;
					private Orientation(int value)
					{
						this.value = value;
					}
					//为枚举类增加readResolve()方法
					private Object readResolve()throws ObjectStreamException
					{
						if (value == 1)
						{
							return HORIZONTAL;
						}
						if (value == 2)
						{
							return VERTICAL;
						}
						return null;
					}
				}



				import java.io.*;

				public class ResolveTest
				{
					public static void main(String[] args) 
					{
						try(
							//创建一个ObjectOutputStream输入流
							ObjectOutputStream oos = new ObjectOutputStream(
								new FileOutputStream("transient.txt"));
							//创建一个ObjectInputStream输入流
							ObjectInputStream ois = new ObjectInputStream(
								new FileInputStream("transient.txt")))
						{
							oos.writeObject(Orientation.HORIZONTAL);
							Orientation ori = (Orientation)ois.readObject();
							System.out.println(ori == Orientation.HORIZONTAL);
						}
						catch (Exception ex)
						{
							ex.printStackTrace();
						}
					}
				}

	

								
																							
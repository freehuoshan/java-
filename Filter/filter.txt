Filter可认为是Servlet的一种"加强版"
使用Filter完整流程是:Filter对用户请求进行预处理,接着将请求交给Servlet进行处理,最后Filter再对服务器响应进行后处理
Filter有如下用处:
	>在HttpServletRequest到达Servlet之前,拦截客户的HttpServletRequest
	>根据需要检查HttpServletRequest,也可以修改HttpServletRequest头和数据
	>在HttpServletResponse到达客户端之前,拦截HttpServletResponse
	>根据需要检查HttpServletResponse,也可以修改HttpServletResponse头和数据

Filter有如下几个种类:
	>用户授权的Filter: Filter负责检查用户请求,根据请求过滤用户非法请求
	>日志Filter: 详细记录某些特殊用户请求
	>负责解码的Filter: 包括对非标准编码的解码
	>能改变XML内容的XSLT Filter等
	>Filter可负责拦截多个请求或响应,一个请求或响应也可被多个Filter拦截

创建Filter步骤:
	>创建Filter处理类	（必须实现javax.servlet.Filter,该接口有init（）完成filter初始化,destroy（）完成资源回收,doFilter()过滤）
	>web.xml文件中配置Filter
		>>通过Annotation进行配置
			@WebFilter修饰Filter支持如下属性:
				asyncSupported:是否支持异步操作模式
				dispatcherTypes:仅对dispatcher模式的请求进行过滤,支持ASYNC、ERROR、FORWARD、INCLUDE、REQUEST任意组合,默认为过滤所有
				displayName:指定Filter显示名
				filterName:指定该Filter的名称
				initParams:为该Filter配置参数
				servletNames:指定对这几个servlet进行过滤
				urlPatterns/value:这两个属性的作用完全相同,都指定该Filter所拦截的URL
		>>通过web.xml

				<filter>
					<!-- Filter的名字，相当于指定@WebFilter
						的filterName属性 -->
					<filter-name>log</filter-name>
					<!-- Filter的实现类 -->
					<filter-class>lee.LogFilter</filter-class> 
				</filter>
				<!-- 定义Filter拦截的URL地址 -->
				<filter-mapping>
					<!-- Filter的名字 -->
					<filter-name>log</filter-name>
					<!-- Filter负责拦截的URL，相当于指定@WebFilter
						的urlPatterns属性 -->
					<url-pattern>/*</url-pattern>
				</filter-mapping>

********************************************************************************/

使用URL Rewrite实现网站伪静态:
		>下载urlwrite包
		>将urlrewrite-***.jar复制到web应用lib文件夹下
		>web.xml中配置URL Rewrite:
			例:
			<filter>
				<filter-name>UrlRewriteFilter</filter-name>
				<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
			</filter>
			<!-- 配置Url Rewrite的Filter拦截所有请求 -->
			<filter-mapping>
				<filter-name>UrlRewriteFilter</filter-name>
				<url-pattern>/*</url-pattern>
			</filter-mapping>
		>在WEB-INF路径下增加urlrewrite.xml文件,该文件定义了伪静态映射规则
			例:
				<?xml version="1.0" encoding="GBK"?>
				<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.2//EN"
					"http://tuckey.org/res/dtds/urlrewrite3.2.dtd">
				<urlrewrite>
					<rule>
						<!-- 所有配置如下正则表达式的请求 -->
						<from>/userinf-(\w*).html</from>
						<!-- 将被forward到如下JSP页面，其中$1代表
							上面第一个正则表达式所匹配的字符串 -->
						<to type="forward">/userinf.jsp?username=$1</to>
					</rule>
				</urlrewrite>

